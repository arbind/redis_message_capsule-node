// Generated by CoffeeScript 1.4.0
(function() {
  var Channel, REDIS, RedisMessageCapsule, node_env,
    __slice = [].slice;

  REDIS = require('redis-url');

  node_env = process.env.NODE_ENV || 'development';

  Channel = (function() {

    function Channel(name, redisClient) {
      this.name = name;
      this.redisClient = redisClient;
    }

    Channel.prototype.send = function(message) {
      var payload;
      payload = {
        'data': message
      };
      console.log(payload);
      console.log(JSON.stringify(payload));
      return this.redisClient.rpush(this.name, JSON.stringify(payload), function(err, count) {
        return console.log(count);
      });
    };

    return Channel;

  })();

  RedisMessageCapsule = (function() {

    RedisMessageCapsule.prototype.config = {};

    function RedisMessageCapsule() {
      var dbNumber;
      console.log("node_env: " + node_env);
      if (node_env === 'production') {
        dbNumber = 7;
      }
      if (node_env === 'development') {
        dbNumber = 8;
      }
      if (node_env === 'test') {
        dbNumber = 9;
      }
      dbNumber || (dbNumber = 9);
      this.redisClients = {};
      this.capsuleChannels = {};
      this.listenerThreads = {};
      this.configuration = {
        redisURL: process.env.REDIS_URL || process.env.REDISTOGO_URL || 'redis://127.0.0.1:6379/',
        redisDBNumber: dbNumber
      };
      this.config = this.configuration;
    }

    RedisMessageCapsule.prototype.makeClientKey = function(url, dbNum) {
      return "" + url + "." + dbNum;
    };

    RedisMessageCapsule.prototype.makeChannelKey = function(name, url, dbNum) {
      return "" + name + "." + url + "." + dbNum;
    };

    RedisMessageCapsule.prototype.makeListenerKey = function() {
      var channels, dbNum, url, _i;
      channels = 3 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 2) : (_i = 0, []), url = arguments[_i++], dbNum = arguments[_i++];
      return __slice.call(channels).concat([url], [dbNum]).join('.');
    };

    RedisMessageCapsule.prototype.channel = function(name, redisURL, dbNumber) {
      var channel, channelKey, clientKey, dbNum, redisClient, url;
      if (redisURL == null) {
        redisURL = null;
      }
      if (dbNumber == null) {
        dbNumber = -1;
      }
      url = redisURL || this.config.redisURL;
      dbNum = dbNumber;
      if (dbNum < 0) {
        dbNum = this.config.redisDBNumber;
      }
      channelKey = this.makeChannelKey(name, url, dbNum);
      if (this.capsuleChannels[channelKey] != null) {
        return this.capsuleChannels[channelKey];
      }
      clientKey = this.makeClientKey(url, dbNum);
      redisClient = this.redisClients[clientKey];
      if (redisClient == null) {
        redisClient = REDIS.connect(url);
        if (redisClient == null) {
          puts("!!!\n!!! Can not connect to redis server at " + uri + "\n!!!");
          return null;
        }
        console.log("selecting " + dbNum);
        redisClient.select(dbNum);
        this.redisClients[clientKey] = redisClient;
      }
      channel = new Channel(name, redisClient);
      this.capsuleChannels[channelKey] = channel;
      return channel;
    };

    return RedisMessageCapsule;

  })();

  module.exports = new RedisMessageCapsule;

}).call(this);
