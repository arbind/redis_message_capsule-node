// Generated by CoffeeScript 1.4.0
(function() {
  var Capsule, Channel, ChannelListener, ChannelMessageHandler, REDIS, RedisMessageCapsule, node_env;

  REDIS = require('redis-url');

  node_env = process.env.NODE_ENV || 'development';

  RedisMessageCapsule = (function() {

    function RedisMessageCapsule() {}

    RedisMessageCapsule.capsules = {};

    RedisMessageCapsule.configuration = {
      redisURL: process.env.REDIS_URL || process.env.REDISTOGO_URL || 'redis://127.0.0.1:6379/',
      dbNumber: (function() {
        switch (node_env) {
          case 'production':
            return 7;
          case 'development':
            return 8;
          case 'test':
            return 9;
          default:
            return 9;
        }
      })()
    };

    RedisMessageCapsule.makeCapsuleKey = function(url, dbNum) {
      return "" + url + "." + dbNum;
    };

    RedisMessageCapsule.materializeCapsule = function(redisURL, dbNumber) {
      var capsule, dbNum, key, url;
      if (redisURL == null) {
        redisURL = null;
      }
      if (dbNumber == null) {
        dbNumber = -1;
      }
      url = redisURL || RedisMessageCapsule.configuration.redisURL;
      dbNum = dbNumber;
      if (dbNum < 0) {
        dbNum = RedisMessageCapsule.configuration.dbNumber;
      }
      key = RedisMessageCapsule.makeCapsuleKey(url, dbNum);
      capsule = RedisMessageCapsule.capsules[key] || (new Capsule(url, dbNum));
      return RedisMessageCapsule.capsules[key] = capsule;
    };

    return RedisMessageCapsule;

  })();

  /*
  # Capsule
  #    binds to a redis database (to a selected dbNumber)
  */


  Capsule = (function() {

    function Capsule(redisURL, dbNumber) {
      this.redisURL = redisURL;
      this.dbNumber = dbNumber;
      this.channels = {};
      this.redisClient = REDIS.connect(this.redisURL);
      if (this.redisClient != null) {
        this.redisClient.select(this.dbNumber);
      }
      if (this.redisClient == null) {
        console.log("!!!\n!!! Can not connect to redis server at " + this.redisURL + "\n!!!");
      }
    }

    Capsule.prototype.materializeChannel = function(channelName) {
      var _base;
      return (_base = this.channels)[channelName] || (_base[channelName] = new Channel(channelName, this.redisClient));
    };

    Capsule.prototype.channel = function(channelName) {
      return materializeChannel(channelName);
    };

    Capsule.prototype.makeChannel = function(channelName) {
      return materializeChannel(channelName);
    };

    Capsule.prototype.createChannel = function(channelName) {
      return materializeChannel(channelName);
    };

    return Capsule;

  })();

  Channel = (function() {

    function Channel(channelName, redisClient) {
      this.channelName = channelName;
      this.redisClient = redisClient;
      this.channelListeners = {};
    }

    Channel.prototype.send = function(message, callback) {
      var payload, payloadJSON;
      if (callback == null) {
        callback = null;
      }
      try {
        payload = {
          'data': message
        };
        payloadJSON = JSON.stringify(payload);
        if (payloadJSON == null) {
          throw "Could not serialize to json: " + message;
        }
        return this.redisClient.rpush(this.channelName, payloadJSON, function(err, count) {
          if (callback != null) {
            return callback(err, count);
          }
        });
      } catch (ex) {
        if (callback != null) {
          return callback(ex);
        }
      }
    };

    Channel.prototype.emit = function(message, callback) {
      if (callback == null) {
        callback = null;
      }
      return this.send(message, callback = null);
    };

    Channel.prototype.message = function(message, callback) {
      if (callback == null) {
        callback = null;
      }
      return this.send(message, callback = null);
    };

    Channel.prototype.register = function(handler) {
      var _base, _name;
      (_base = this.channelListeners)[_name = this.channelName] || (_base[_name] = new ChannelListener(this.channelName, this.redisClient));
      return this.channelListeners[this.channelName].startListening(handler);
    };

    return Channel;

  })();

  ChannelListener = (function() {

    function ChannelListener(channelName, redisClient) {
      this.channelName = channelName;
      this.redisClient = redisClient;
      this.listening = false;
    }

    ChannelListener.prototype.startListening = function(handler) {
      this.channelMsgHandler || (this.channelMsgHandler = new ChannelMessageHandler(this.channelName, this.redisClient));
      return this.channelMsgHandler.register(handler);
    };

    return ChannelListener;

  })();

  ChannelMessageHandler = (function() {

    function ChannelMessageHandler(channelName, redisClient) {
      this.channelName = channelName;
      this.redisClient = redisClient;
      this.handlers = [];
      setInterval((function(cmh) {
        return cmh.pollForMessage();
      }), 100, this);
    }

    ChannelMessageHandler.prototype.register = function(handler) {
      return this.handlers.push(handler);
    };

    ChannelMessageHandler.prototype.unregister = function(handler) {
      var _results;
      _results = [];
      while (-1 !== this.handlers.indexOf(handler)) {
        _results.push(this.handlers.splice(this.handlers.indexOf(handler), 1));
      }
      return _results;
    };

    ChannelMessageHandler.prototype.pollForMessage = function() {
      var handler, _i, _len, _ref, _results,
        _this = this;
      if (this.handlers.length == null) {
        return;
      }
      try {
        return this.redisClient.lpop(this.channelName, function(err, element) {
          var handler, message, payload, _i, _len, _ref;
          if (element == null) {
            return;
          }
          err = message = null;
          try {
            return payload = JSON.parse(element);
          } catch (ex) {
            return err = ex;
          } finally {
            payload || (payload = {});
            message = payload.data;
            _ref = _this.handlers;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              handler = _ref[_i];
              handler(err, message);
            }
          }
        });
      } catch (ex) {
        _ref = this.handlers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          handler = _ref[_i];
          _results.push(handler(ex));
        }
        return _results;
      }
    };

    return ChannelMessageHandler;

  })();

  module.exports = RedisMessageCapsule;

}).call(this);
