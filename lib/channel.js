// Generated by CoffeeScript 1.4.0
(function() {
  var Channel, Listener;

  Listener = require('./listener');

  Channel = (function() {

    function Channel(channelName, redisClient, redisURL, dbNumber) {
      this.channelName = channelName;
      this.redisClient = redisClient;
      this.redisURL = redisURL;
      this.dbNumber = dbNumber;
      this.listener = null;
    }

    Channel.prototype.send = function(message, callback) {
      var payload, payloadJSON;
      if (callback == null) {
        callback = null;
      }
      try {
        payload = {
          'data': message
        };
        payloadJSON = JSON.stringify(payload);
        if (payloadJSON == null) {
          throw "Could not serialize to json: " + message;
        }
        return this.redisClient.rpush(this.channelName, payloadJSON, function(err, count) {
          if (callback != null) {
            return callback(err, count);
          }
        });
      } catch (ex) {
        if (callback != null) {
          return callback(ex);
        }
      }
    };

    Channel.prototype.emit = function(message, callback) {
      if (callback == null) {
        callback = null;
      }
      return this.send(message, callback = null);
    };

    Channel.prototype.message = function(message, callback) {
      if (callback == null) {
        callback = null;
      }
      return this.send(message, callback = null);
    };

    Channel.prototype.register = function(handler) {
      this.listener || (this.listener = new Listener(this.channelName, this.redisURL, this.dbNumber));
      this.listener.register(handler);
      return this;
    };

    Channel.prototype.on = function(handler) {
      return this.register(handler);
    };

    Channel.prototype.uneregister = function() {};

    Channel.prototype.stopListening = function() {};

    return Channel;

  })();

  module.exports = Channel;

}).call(this);
