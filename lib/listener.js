// Generated by CoffeeScript 1.4.0
(function() {
  var Fiber, Listener, blpopProcess,
    _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Fiber = require('fibers');

  blpopProcess = function(listener) {
    listener.blpopForever();
    return Fiber["yield"](listener);
  };

  Listener = (function() {

    function Listener(channelName, redisURL, dbNumber) {
      this.channelName = channelName;
      this.redisURL = redisURL;
      this.dbNumber = dbNumber;
      this.blpopForever = __bind(this.blpopForever, this);

      this.handlers = [];
      this.listening = false;
      this.listenerFiber = null;
      this.redisClient = null;
    }

    Listener.prototype.register = function(handler) {
      this.handlers.push(handler);
      if (this.listenerFiber == null) {
        this.launchListener();
      }
      return handler;
    };

    Listener.prototype.unregister = function(handler) {
      var _results;
      _results = [];
      while (-1 !== this.handlers.indexOf(handler)) {
        _results.push(this.handlers.splice(this.handlers.indexOf(handler), 1));
      }
      return _results;
    };

    Listener.prototype.stopListening = function() {
      return this.listening = false;
    };

    Listener.prototype.launchListener = function() {
      if (this.listenerFiber != null) {
        return this.listenerFiber;
      }
      this.listenerFiber = Fiber(blpopProcess);
      return this.listenerFiber.run(this);
    };

    /*
      #   blpop: blocking pop
      #     pop a message from a channel (a list in redis)
      #     pass the message to all registered handlers for processing
      #     recursively call itself to consume the next message
      #     block until a message is available if the list is empty
      #     
      #     to avoid blocking the main loop, only call this method from withn a fiber
    */


    Listener.prototype.blpopForever = function() {
      var _this = this;
      this.redisClient || (this.redisClient = RedisMessageCapsule.materialize_redis_client(this.redisURL, this.dbNumber));
      if (this.redisClient == null) {
        console.log("Could not connect to redis " + listener.redisURL + " [" + listener.dbNumber + "]");
        return;
      }
      return this.redisClient.blpop(this.channelName, 0, function(err, channel_element) {
        var channel, element, handler, message, payload, _fn, _i, _len, _ref;
        err = message = null;
        try {
          channel = channel_element[0];
          element = channel_element[1];
          if (element != null) {
            return payload = JSON.parse(element);
          }
        } catch (ex) {
          return err = ex;
        } finally {
          payload || (payload = {});
          message = payload.data;
          _ref = _this.handlers;
          _fn = function(handler) {
            try {
              return handler(err, message);
            } catch (handlerEx) {
              console.log("handler Exception:");
              return console.log(handlerEx);
            }
          };
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            handler = _ref[_i];
            _fn(handler);
          }
          _this.blpopForever();
        }
      });
    };

    return Listener;

  })();

  module.exports = Listener;

}).call(this);
