// Generated by CoffeeScript 1.4.0
(function() {
  var Channel, JASON, REDIS, RedisMessageCapsule, TAGG, node_env, notifyOnMessages,
    _this = this,
    __slice = [].slice;

  REDIS = require('redis-url');

  TAGG = require('threads_a_gogo');

  JASON = require("JASON");

  node_env = process.env.NODE_ENV || 'development';

  notifyOnMessages = function(redisClient, channel, handler) {
    return redisClient.lpop(channel, function(err, element) {
      var message, payload;
      if (element == null) {
        return;
      }
      try {
        payload = JSON.parse(element);
      } catch (ignoredException) {

      } finally {
        if (payload == null) {
          payload = {};
        }
      }
      message = payload.data;
      console.log("" + channel + ":");
      console.log(message);
      return handler(message);
    });
  };

  Channel = (function() {

    function Channel(name, redisClient) {
      this.name = name;
      this.redisClient = redisClient;
    }

    Channel.prototype.send = function(message) {
      var payload;
      payload = {
        'data': message
      };
      console.log(payload);
      console.log(JSON.stringify(payload));
      return this.redisClient.rpush(this.name, JSON.stringify(payload), function(err, count) {
        return console.log(count);
      });
    };

    return Channel;

  })();

  RedisMessageCapsule = (function() {

    RedisMessageCapsule.prototype.config = {};

    function RedisMessageCapsule() {
      var dbNumber;
      console.log("node_env: " + node_env);
      if (node_env === 'production') {
        dbNumber = 7;
      }
      if (node_env === 'development') {
        dbNumber = 8;
      }
      if (node_env === 'test') {
        dbNumber = 9;
      }
      dbNumber || (dbNumber = 9);
      this.redisClients = {};
      this.capsuleChannels = {};
      this.listenerThreads = {};
      this.configuration = {
        redisURL: process.env.REDIS_URL || process.env.REDISTOGO_URL || 'redis://127.0.0.1:6379/',
        redisDBNumber: dbNumber
      };
      this.config = this.configuration;
    }

    RedisMessageCapsule.prototype.makeClientKey = function(url, dbNum) {
      return "" + url + "." + dbNum;
    };

    RedisMessageCapsule.prototype.makeChannelKey = function(name, url, dbNum) {
      return "" + name + "." + url + "." + dbNum;
    };

    RedisMessageCapsule.prototype.makeListenerKey = function(channels, url, dbNum) {
      return __slice.call(channels).concat([url], [dbNum]).join('.');
    };

    RedisMessageCapsule.prototype.channel = function(name, redisURL, dbNumber) {
      var channel, channelKey, clientKey, dbNum, redisClient, url;
      if (redisURL == null) {
        redisURL = null;
      }
      if (dbNumber == null) {
        dbNumber = -1;
      }
      url = redisURL || this.config.redisURL;
      dbNum = dbNumber;
      if (dbNum < 0) {
        dbNum = this.config.redisDBNumber;
      }
      channelKey = this.makeChannelKey(name, url, dbNum);
      if (this.capsuleChannels[channelKey] != null) {
        return this.capsuleChannels[channelKey];
      }
      clientKey = this.makeClientKey(url, dbNum);
      redisClient = this.redisClients[clientKey];
      if (redisClient == null) {
        redisClient = REDIS.connect(url);
        if (redisClient == null) {
          console.log("!!!\n!!! Can not connect to redis server at " + uri + "\n!!!");
          return null;
        }
        console.log("selecting " + dbNum);
        redisClient.select(dbNum);
        this.redisClients[clientKey] = redisClient;
      }
      channel = new Channel(name, redisClient);
      this.capsuleChannels[channelKey] = channel;
      return channel;
    };

    /*
      # functionAsString
      #   convert
      #     fnName = function (){...}
      #   into:
      #     function fnName(){...}
    */


    RedisMessageCapsule.prototype.functionAsString = function(fnName, fn) {
      var fnToString;
      fnToString = fn.toString();
      return fnToString.replace("function", "function " + fnName);
    };

    RedisMessageCapsule.prototype.listen = function(channelsArray, cfg, handler) {
      var channels, dbNum, key, redisClient, url;
      if (cfg == null) {
        cfg = {};
      }
      if (handler == null) {
        handler = cfg;
        cfg = {
          redisUrl: null,
          dbNumber: -1
        };
      }
      if (channels instanceof Array) {
        channels = channelsArray;
      }
      if (channels == null) {
        channels = [channelsArray];
      }
      dbNum = cfg.dbNumber || -1;
      if (dbNum < 0) {
        dbNum = this.config.redisDBNumber;
      }
      url = cfg.redisUrl || this.config.redisURL;
      key = this.makeListenerKey(channels, url, dbNum);
      console.log(key);
      redisClient = require('redis-url').connect(url);
      if (redisClient == null) {
        console.log("!!!\n!!! Can not connect to redis server at " + uri + "\n!!!");
        return null;
      }
      console.log("selecting " + dbNum);
      return redisClient.select(dbNum, function(err, val) {
        var channelName, _i, _len, _results;
        console.log(val);
        _results = [];
        for (_i = 0, _len = channels.length; _i < _len; _i++) {
          channelName = channels[_i];
          _results.push(setInterval(notifyOnMessages, 100, redisClient, channelName, handler));
        }
        return _results;
      });
    };

    return RedisMessageCapsule;

  })();

  module.exports = new RedisMessageCapsule;

}).call(this);
